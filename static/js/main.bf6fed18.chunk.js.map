{"version":3,"sources":["DateFormat.js","MainData.js","DisplayData.js","DegreeToggle.js","App.js","serviceWorker.js","index.js"],"names":["months","MainData","props","far","Math","round","temp","cel","farMax","temp_max","celMax","farMin","temp_min","celMin","className","timeString","unit","splitTime","split","hrs","min","TimeFormat","time","src","icon","alt","main","description","degree","humidity","windSpeed","DisplayData","this","city","country","error","mainResult","map","result","i","key","dateString","splitDate","year","month","day","DateFormat","dateKey","weatherArr","slice","weatherItem","weather","wind","speed","dt_txt","Component","DegreeToggle","type","name","id","value","checked","onChange","updateDegreeToggle","htmlFor","require","config","api","process","base","App","state","list","categorizeList","getWeather","e","preventDefault","target","fetch","then","res","json","cod","setState","categorizeResults","message","dates","item","filter","currArr","indexOf","console","log","date","push","itemDate","handleSelect","select","onSubmit","placeholder","pattern","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.bf6fed18.chunk.js","sourcesContent":["const months = {\r\n    \"01\" : \"January\",\r\n    \"02\" : \"February\",\r\n    \"03\" : \"March\",\r\n    \"04\" : \"April\",\r\n    \"05\" : \"May\",\r\n    \"06\" : \"June\",\r\n    \"07\" : \"July\",\r\n    \"08\" : \"August\",\r\n    \"09\" : \"September\",\r\n    \"10\" : \"October\",\r\n    \"11\" : \"November\",\r\n    \"12\" : \"December\",\r\n}\r\n\r\nexport const DateFormat = function(dateString){\r\n    const splitDate = dateString.split('-')\r\n\r\n    const year = splitDate[0]\r\n    const month = splitDate[1]\r\n    const day = splitDate[2]\r\n\r\n    const formattedDate = `${months[month]}, ${day}, ${year}`\r\n\r\n    return formattedDate\r\n}\r\n\r\nexport const TimeFormat = function(timeString){\r\n    const splitTime = timeString.split(':')\r\n    const hrs = splitTime[0].split(' ')[1]\r\n    const min = splitTime[1]\r\n\r\n    let unit\r\n    if(hrs >= 12)\r\n        unit = 'PM'\r\n    else\r\n        unit = 'AM'\r\n    \r\n    const time1 = `${hrs}:${min} ${unit}`\r\n    \r\n    return time1\r\n}","import React from 'react';\r\nimport {TimeFormat} from './DateFormat'\r\n\r\nconst MainData = (props) => {\r\n    const far = Math.round(props.temp)\r\n    const cel = Math.round((far - 32) * 5/9)\r\n\r\n    const farMax = Math.round(props.temp_max)\r\n    const celMax = Math.round((farMax - 32) * 5/9)\r\n\r\n    const farMin = Math.round(props.temp_min)\r\n    const celMin = Math.round((farMin - 32) * 5/9)\r\n    return(\r\n        <div className=\"data\">\r\n            <center>\r\n                <p>\r\n                <span className=\"time\"><b>{TimeFormat(props.time)}</b></span><br/>\r\n                <img src = {`http://openweathermap.org/img/w/${props.icon}.png`} alt = {props.main}/><br/>\r\n                <span className=\"description\">{props.description}</span><br/>\r\n                \r\n                {\r\n                    props.degree === \"C\" ? <span className=\"temp\">{cel} &#8451;</span>\r\n                    :\r\n                    <span className=\"temp\">{far} &#8457;</span>\r\n                }\r\n                <br/>\r\n                {\r\n                    props.degree === \"C\" ? <span className=\"temp_max\">H: {celMax} &#8451;</span>\r\n                    :\r\n                    <span className=\"temp_max\">H: {farMax} &#8457;</span>\r\n                }\r\n                <br/>\r\n                {\r\n                    props.degree === \"C\" ? <span className=\"temp_min\">L: {celMin} &#8451;</span>\r\n                    :\r\n                    <span className=\"temp_min\">L: {farMin} &#8457;</span>\r\n                }\r\n                <br/>\r\n                Humidity: <span className=\"humidity\">{props.humidity} %</span><br/>\r\n                Wind: <span className=\"windSpeed\">{props.windSpeed} mph</span><br/>\r\n                </p>\r\n            </center>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MainData","import React, { Component } from 'react';\r\nimport {DateFormat} from './DateFormat';\r\nimport MainData from './MainData'\r\n\r\nclass DisplayData extends Component {   \r\n\r\n      render() {\r\n            let {city,country,error,mainResult,degree} = this.props\r\n            return ( \r\n                  <div>\r\n                        <center>\r\n                              <strong> {country ? <span>{city}, {country}</span> : \"\"}</strong>\r\n                              {error ? <span className=\"error\">{error}</span> : \"\"}\r\n                        </center>   \r\n                        \r\n                        {\r\n                              mainResult.map((result,i) =>{\r\n                                    return(\r\n                                          <div key={i} className=\"dataBunch\">\r\n                                                <span className=\"date\"><b>Date:</b> {DateFormat(result.dateKey)}</span>\r\n                                                <ul>\r\n                                                      {\r\n                                                            result.weatherArr.slice(0,4)\r\n                                                            .map((weatherItem, i) => \r\n                                                            <MainData\r\n                                                                  key={i}\r\n                                                                  icon = {weatherItem.weather[0].icon}\r\n                                                                  main = {weatherItem.weather[0].main}\r\n                                                                  description = {weatherItem.weather[0].description}\r\n                                                                  temp = {weatherItem.main.temp}\r\n                                                                  temp_min = {weatherItem.main.temp_min}\r\n                                                                  temp_max = {weatherItem.main.temp_max}\r\n                                                                  humidity = {weatherItem.main.humidity}\r\n                                                                  windSpeed = {weatherItem.wind.speed}\r\n                                                                  time = {weatherItem.dt_txt}\r\n                                                                  degree = {degree}\r\n                                                            />)\r\n                                                      }\r\n                                                </ul>\r\n                                                <ul>\r\n                                                      {\r\n                                                            result.weatherArr.slice(4)\r\n                                                            .map((weatherItem, i) => \r\n                                                            <MainData\r\n                                                                  key={i}\r\n                                                                  icon = {weatherItem.weather[0].icon}\r\n                                                                  main = {weatherItem.weather[0].main}\r\n                                                                  description = {weatherItem.weather[0].description}\r\n                                                                  temp = {weatherItem.main.temp}\r\n                                                                  temp_min = {weatherItem.main.temp_min}\r\n                                                                  temp_max = {weatherItem.main.temp_max}\r\n                                                                  humidity = {weatherItem.main.humidity}\r\n                                                                  windSpeed = {weatherItem.wind.speed}\r\n                                                                  time = {weatherItem.dt_txt}\r\n                                                            />)\r\n                                                      }\r\n                                                </ul>\r\n                                          </div>\r\n\r\n                                    )}\r\n                              )\r\n                        }\r\n                  </div>\r\n             );\r\n      }\r\n}\r\n \r\nexport default DisplayData;","import React from 'react';\r\n\r\nconst DegreeToggle = (props) => {\r\n    return(\r\n        <div className=\"radioButtons\">\r\n            <input \r\n                type=\"radio\"\r\n                name = \"degree\"\r\n                id = \"F\"\r\n                value = \"F\"\r\n                checked = {props.degree === \"F\"}\r\n                onChange = {props.updateDegreeToggle}\r\n            />\r\n            <label htmlFor=\"F\">Fahrenheit</label>\r\n            <input\r\n                type=\"radio\"\r\n                name = \"degree\"\r\n                id = \"C\"\r\n                value = \"C\"\r\n                checked = {props.degree === \"C\"}\r\n                onChange = {props.updateDegreeToggle}\r\n            />\r\n            <label htmlFor = \"C\">Celsius</label>\r\n        </div>  \r\n    )\r\n}\r\n\r\nexport default DegreeToggle","import React,{Component} from 'react';\nimport './App.css';\nimport DisplayData from './DisplayData'\nimport DegreeToggle from './DegreeToggle';\nrequire('dotenv').config();\n\nconst api = {\n  key : process.env.REACT_APP_API_KEY.split(';')[0],\n  base: \"http://api.openweathermap.org/data/2.5/forecast?q=\"\n}\n\nclass App extends Component {\n  state = { \n    name: \"\",\n    country: \"\",\n    list: [],\n    categorizeList: [],\n    error: \"\",\n    // clearFields: \"\",\n    degree: \"F\"\n  }\n\n  getWeather = (e) => {\n    e.preventDefault()\n    const city = e.target.city.value;\n    \n    if(city !== \"\"){\n      fetch(`${api.base}${city}&units=imperial&appid=${api.key}`)\n      .then(res => res.json())\n      .then(res => {\n        if(res.cod === \"200\"){\n          this.setState({\n            city: res.city.name,\n            country: res.city.country,\n            list: res.list,\n            categorizeList: this.categorizeResults(res.list),\n            error: \"\",\n            degree : \"F\",\n            // clearFields: \"Yes\"\n          })\n          //console.log(\"categorizeList\",this.state.categorizeList)\n        }\n        else if(res.cod === \"404\"){\n          this.setState({\n            city: \"\",\n            country: \"\",\n            list: [],\n            categorizeList: [],\n            error: res.message,\n            degree : \"\",\n            // clearFields: \"\"\n          })\n        }\n      //console.log(\"res\",res,\"error\",this.state.error,\"cod\",res.cod,\"this error\",res.message)\n      })\n    }\n    else{\n      this.setState({\n        city: \"\",\n        country: \"\",\n        list: [],\n        categorizeList: [],\n        error: \"Please enter the city name!\",\n        degree : \"\",\n        // clearFields: \"\"\n      })\n    }\n\n    //console.log(\"city\",city,\"this.state.city\",this.state.city, \"country\",this.state.country)\n    //console.log(\"categorizeList\",categorizeList)\n  }\n\n  categorizeResults = (list) => {\n    //get unique 5 day dates\n    const dates = list.map(item => item.dt_txt.split(\" \")[0]) //get date (index 0)\n                  .filter((item,i,currArr) => currArr.indexOf(item) === i) //get unique dates\n\n    console.log(dates)\n    \n    //creating an object with dates as identifier/key\n    let mainResult = [];\n    for(let date of dates){\n      mainResult.push({\n        dateKey: date,\n        weatherArr: []\n      })\n    }\n\n    //get date from res.list and check if date of mainResults and res.list is same, then add the data in weatherArr\n    for(let item of list){\n      let itemDate = item.dt_txt.split(\" \")[0]\n\n      for(let result of mainResult){\n        if(result.dateKey === itemDate)\n          result.weatherArr.push(item)\n      }\n    }\n\n    //console.log(\"Main Result\", mainResult)\n    return mainResult\n  }\n\n  handleSelect = (e) => {\n    e.target.select()\n  }\n\n  updateDegreeToggle = e => {\n    this.setState({\n      degree : e.target.value\n    })\n  }\n\n  render() { \n    return ( \n      <div className=\"wrapper\">\n        <div className=\"container\">\n          <div className=\"row\">\n            \n            <div className=\"col-xl-2 col-lg-2 col-md-2 col-sm-1\">\n              <span className=\"weatherFinder\">WEATHER FORECAST</span>\n            </div>\n\n            <div className=\"col-xl-8 col-lg-8 col-md-8 col-sm-10 main-container\">\n              <div className=\"row\">\n                <div className=\"col-xl-2 col-lg-2 col-md-1 col-sm-1\"></div>\n                \n                <div className=\"col-xl-8 col-lg-8 col-md-10 col-sm-10 form-container\">\n                  <span className=\"info\">* Please enter only alphabets.</span>\n                  <form onSubmit={this.getWeather}>\n                    <input \n                      type=\"text\" \n                      placeholder=\"City..\" \n                      name=\"city\" \n                      pattern=\"[A-Za-z ]+\" \n                      id=\"cityName\"\n                      onClick = {this.handleSelect}\n                    />\n\n                    <button className=\"btn btn-info getWeather\">Get Weather Forecast</button>\n\n                    <DegreeToggle updateDegreeToggle={this.updateDegreeToggle} degree={this.state.degree}/>      \n                    {/* {this.state.clearFields ? \"\" : <button className=\"btn btn-info getWeather\">Get Weather</button>} */}\n\n                    {/* {this.state.clearFields ? \n                      <button className=\"btn btn-info getAnotherForecast\"\n                        onClick={() => window.location.reload()}>Get Another Forecast</button> : \n                        <h1>{this.state.clearFields}</h1>\n                    } */}\n                  </form>\n                </div>\n               \n                <div className=\"col-xl-2 col-lg-2 col-md-1 col-sm-1\"></div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"col-lg-12\">\n                  <div className=\"displayData\">\n                    <DisplayData\n                      city = {this.state.city}\n                      country = {this.state.country}\n                      error = {this.state.error}\n                      mainResult = {this.state.categorizeList}\n                      degree = {this.state.degree}\n                    />\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"col-xl-2 col-lg-2 col-md-2 col-sm-1\">\n              <span className=\"weatherFinder\">WEATHER FORECAST</span>\n            </div>\n          </div>\n        </div>\n      </div>\n     );\n  }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}